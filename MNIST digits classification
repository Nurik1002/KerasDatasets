{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3fab56da",
   "metadata": {
    "papermill": {
     "duration": 0.008023,
     "end_time": "2024-07-15T12:42:51.398170",
     "exception": false,
     "start_time": "2024-07-15T12:42:51.390147",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### MNIST digits classification with tensorflow keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4969c49",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-15T12:42:51.414442Z",
     "iopub.status.busy": "2024-07-15T12:42:51.414069Z",
     "iopub.status.idle": "2024-07-15T12:43:03.001521Z",
     "shell.execute_reply": "2024-07-15T12:43:03.000697Z"
    },
    "papermill": {
     "duration": 11.598161,
     "end_time": "2024-07-15T12:43:03.003793",
     "exception": false,
     "start_time": "2024-07-15T12:42:51.405632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-15 12:42:52.912794: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-15 12:42:52.912898: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-15 12:42:53.014782: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten \n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "40d9b136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:03.020997Z",
     "iopub.status.busy": "2024-07-15T12:43:03.020487Z",
     "iopub.status.idle": "2024-07-15T12:43:03.237369Z",
     "shell.execute_reply": "2024-07-15T12:43:03.236539Z"
    },
    "papermill": {
     "duration": 0.227396,
     "end_time": "2024-07-15T12:43:03.239271",
     "exception": false,
     "start_time": "2024-07-15T12:43:03.011875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'),\n",
       " PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'),\n",
       " PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.config.list_physical_devices()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc9dd56d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:03.255891Z",
     "iopub.status.busy": "2024-07-15T12:43:03.255609Z",
     "iopub.status.idle": "2024-07-15T12:43:03.725917Z",
     "shell.execute_reply": "2024-07-15T12:43:03.725151Z"
    },
    "papermill": {
     "duration": 0.481271,
     "end_time": "2024-07-15T12:43:03.728268",
     "exception": false,
     "start_time": "2024-07-15T12:43:03.246997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
     ]
    }
   ],
   "source": [
    "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "05b02ace",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:03.745858Z",
     "iopub.status.busy": "2024-07-15T12:43:03.745582Z",
     "iopub.status.idle": "2024-07-15T12:43:03.750367Z",
     "shell.execute_reply": "2024-07-15T12:43:03.749520Z"
    },
    "papermill": {
     "duration": 0.015871,
     "end_time": "2024-07-15T12:43:03.752525",
     "exception": false,
     "start_time": "2024-07-15T12:43:03.736654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 28, 28)\n",
      "(60000,)\n",
      "(10000, 28, 28)\n",
      "(10000,)\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape)\n",
    "print(y_train.shape)\n",
    "print(x_test.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fab898bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:03.769602Z",
     "iopub.status.busy": "2024-07-15T12:43:03.769340Z",
     "iopub.status.idle": "2024-07-15T12:43:05.041665Z",
     "shell.execute_reply": "2024-07-15T12:43:05.040750Z"
    },
    "papermill": {
     "duration": 1.283268,
     "end_time": "2024-07-15T12:43:05.043702",
     "exception": false,
     "start_time": "2024-07-15T12:43:03.760434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2, 5, figsize=(10,5))\n",
    "idx = 0\n",
    "for i in range(2):\n",
    "    for j in range(5):\n",
    "        ax[i,j].imshow(x_train[idx])\n",
    "        ax[i,j].set_title(y_train[idx])\n",
    "        idx += 1\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b28c5572",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:05.062978Z",
     "iopub.status.busy": "2024-07-15T12:43:05.062672Z",
     "iopub.status.idle": "2024-07-15T12:43:05.068061Z",
     "shell.execute_reply": "2024-07-15T12:43:05.067252Z"
    },
    "papermill": {
     "duration": 0.017545,
     "end_time": "2024-07-15T12:43:05.069897",
     "exception": false,
     "start_time": "2024-07-15T12:43:05.052352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('uint8')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6935a03c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:05.087868Z",
     "iopub.status.busy": "2024-07-15T12:43:05.087608Z",
     "iopub.status.idle": "2024-07-15T12:43:05.223841Z",
     "shell.execute_reply": "2024-07-15T12:43:05.223010Z"
    },
    "papermill": {
     "duration": 0.147825,
     "end_time": "2024-07-15T12:43:05.226179",
     "exception": false,
     "start_time": "2024-07-15T12:43:05.078354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train = x_train / 255.  \n",
    "x_test = x_test / 255.   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6e0f930f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:05.245172Z",
     "iopub.status.busy": "2024-07-15T12:43:05.244836Z",
     "iopub.status.idle": "2024-07-15T12:43:05.250526Z",
     "shell.execute_reply": "2024-07-15T12:43:05.249517Z"
    },
    "papermill": {
     "duration": 0.017391,
     "end_time": "2024-07-15T12:43:05.252565",
     "exception": false,
     "start_time": "2024-07-15T12:43:05.235174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc13fbb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:05.271040Z",
     "iopub.status.busy": "2024-07-15T12:43:05.270776Z",
     "iopub.status.idle": "2024-07-15T12:43:05.856927Z",
     "shell.execute_reply": "2024-07-15T12:43:05.856186Z"
    },
    "papermill": {
     "duration": 0.59768,
     "end_time": "2024-07-15T12:43:05.859027",
     "exception": false,
     "start_time": "2024-07-15T12:43:05.261347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = Sequential([\n",
    "    tf.keras.Input(shape=(28,28)),\n",
    "    Flatten(),\n",
    "    Dense(128, activation=\"relu\"),\n",
    "    Dense(50, activation=\"relu\"),\n",
    "    Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9ffaed6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:05.879507Z",
     "iopub.status.busy": "2024-07-15T12:43:05.879202Z",
     "iopub.status.idle": "2024-07-15T12:43:05.900297Z",
     "shell.execute_reply": "2024-07-15T12:43:05.899426Z"
    },
    "papermill": {
     "duration": 0.033878,
     "end_time": "2024-07-15T12:43:05.902686",
     "exception": false,
     "start_time": "2024-07-15T12:43:05.868808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">784</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">100,480</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">6,450</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">510</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m784\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m100,480\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m)             │         \u001b[38;5;34m6,450\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │           \u001b[38;5;34m510\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">107,440</span> (419.69 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m107,440\u001b[0m (419.69 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">107,440</span> (419.69 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m107,440\u001b[0m (419.69 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "58d6a9fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:05.922991Z",
     "iopub.status.busy": "2024-07-15T12:43:05.922731Z",
     "iopub.status.idle": "2024-07-15T12:43:05.934992Z",
     "shell.execute_reply": "2024-07-15T12:43:05.934359Z"
    },
    "papermill": {
     "duration": 0.024644,
     "end_time": "2024-07-15T12:43:05.936886",
     "exception": false,
     "start_time": "2024-07-15T12:43:05.912242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer=\"Adam\", loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics = [\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2645f874",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:05.956988Z",
     "iopub.status.busy": "2024-07-15T12:43:05.956633Z",
     "iopub.status.idle": "2024-07-15T12:43:38.946510Z",
     "shell.execute_reply": "2024-07-15T12:43:38.945598Z"
    },
    "papermill": {
     "duration": 33.002283,
     "end_time": "2024-07-15T12:43:38.948497",
     "exception": false,
     "start_time": "2024-07-15T12:43:05.946214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/backend/tensorflow/nn.py:609: UserWarning: \"`sparse_categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a Softmax activation and thus does not represent logits. Was this intended?\n",
      "  output, from_logits = _get_logits(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m  93/1500\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.5713 - loss: 1.4412"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1721047389.164823      73 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n",
      "W0000 00:00:1721047389.182393      73 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1483/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8636 - loss: 0.4693"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1721047392.168032      72 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - accuracy: 0.8643 - loss: 0.4669 - val_accuracy: 0.9605 - val_loss: 0.1360\n",
      "Epoch 2/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9621 - loss: 0.1265 - val_accuracy: 0.9656 - val_loss: 0.1122\n",
      "Epoch 3/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9752 - loss: 0.0819 - val_accuracy: 0.9697 - val_loss: 0.1008\n",
      "Epoch 4/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9825 - loss: 0.0566 - val_accuracy: 0.9719 - val_loss: 0.0989\n",
      "Epoch 5/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9843 - loss: 0.0465 - val_accuracy: 0.9737 - val_loss: 0.0913\n",
      "Epoch 6/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9888 - loss: 0.0353 - val_accuracy: 0.9723 - val_loss: 0.1063\n",
      "Epoch 7/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9903 - loss: 0.0287 - val_accuracy: 0.9708 - val_loss: 0.1167\n",
      "Epoch 8/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9919 - loss: 0.0241 - val_accuracy: 0.9753 - val_loss: 0.0940\n",
      "Epoch 9/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9929 - loss: 0.0209 - val_accuracy: 0.9731 - val_loss: 0.1197\n",
      "Epoch 10/10\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - accuracy: 0.9936 - loss: 0.0188 - val_accuracy: 0.9757 - val_loss: 0.0997\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7a0291ba8700>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train, validation_split=0.2, epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ca50933e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:39.052642Z",
     "iopub.status.busy": "2024-07-15T12:43:39.051934Z",
     "iopub.status.idle": "2024-07-15T12:43:40.580201Z",
     "shell.execute_reply": "2024-07-15T12:43:40.579293Z"
    },
    "papermill": {
     "duration": 1.58246,
     "end_time": "2024-07-15T12:43:40.582072",
     "exception": false,
     "start_time": "2024-07-15T12:43:38.999612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m111/313\u001b[0m \u001b[32m━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.9732 - loss: 0.1108"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1721047419.704102      72 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9735 - loss: 0.1079\n",
      "Accuracy : 0.9772999882698059\n",
      "Loss : 0.09061303734779358\n"
     ]
    }
   ],
   "source": [
    "loss, acc = model.evaluate(x_test, y_test)\n",
    "print(f\"Accuracy : {acc}\\nLoss : {loss}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb827a1a",
   "metadata": {
    "papermill": {
     "duration": 0.048979,
     "end_time": "2024-07-15T12:43:40.680902",
     "exception": false,
     "start_time": "2024-07-15T12:43:40.631923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### MNIST classification with Pytorch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fd766eaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:40.780969Z",
     "iopub.status.busy": "2024-07-15T12:43:40.780664Z",
     "iopub.status.idle": "2024-07-15T12:43:45.553836Z",
     "shell.execute_reply": "2024-07-15T12:43:45.553041Z"
    },
    "papermill": {
     "duration": 4.825137,
     "end_time": "2024-07-15T12:43:45.556066",
     "exception": false,
     "start_time": "2024-07-15T12:43:40.730929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import torch\n",
    "from torch import nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "import torchvision.datasets as datasets\n",
    "from torchvision import datasets, transforms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "841a2daf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:45.657514Z",
     "iopub.status.busy": "2024-07-15T12:43:45.656769Z",
     "iopub.status.idle": "2024-07-15T12:43:45.662811Z",
     "shell.execute_reply": "2024-07-15T12:43:45.661870Z"
    },
    "papermill": {
     "duration": 0.058889,
     "end_time": "2024-07-15T12:43:45.664645",
     "exception": false,
     "start_time": "2024-07-15T12:43:45.605756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cuda device\n"
     ]
    }
   ],
   "source": [
    "device = (\n",
    "    \"cuda\"\n",
    "    if torch.cuda.is_available()\n",
    "    else \"mps\"\n",
    "    if torch.backends.mps.is_available()\n",
    "    else \"cpu\"\n",
    ")\n",
    "print(f\"Using {device} device\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5bf192f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:45.769180Z",
     "iopub.status.busy": "2024-07-15T12:43:45.768869Z",
     "iopub.status.idle": "2024-07-15T12:43:45.773437Z",
     "shell.execute_reply": "2024-07-15T12:43:45.772480Z"
    },
    "papermill": {
     "duration": 0.059962,
     "end_time": "2024-07-15T12:43:45.775615",
     "exception": false,
     "start_time": "2024-07-15T12:43:45.715653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_size = 28*28\n",
    "num_classes = 10\n",
    "learning_rate = 0.001\n",
    "batch_size = 64\n",
    "num_epochs = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a76dfcf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:45.883011Z",
     "iopub.status.busy": "2024-07-15T12:43:45.882699Z",
     "iopub.status.idle": "2024-07-15T12:43:45.895389Z",
     "shell.execute_reply": "2024-07-15T12:43:45.894419Z"
    },
    "papermill": {
     "duration": 0.068186,
     "end_time": "2024-07-15T12:43:45.897829",
     "exception": false,
     "start_time": "2024-07-15T12:43:45.829643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class NNet(nn.Module):\n",
    "    def __init__(self, input_size, num_classes):\n",
    "        super().__init__()\n",
    "        self.flatten = nn.Flatten()\n",
    "        self.linear1 = nn.Linear(input_size, 128)\n",
    "        self.linear2 = nn.Linear(128, 50)\n",
    "        self.linear3 = nn.Linear(50,  num_classes)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.softmax = nn.Softmax()\n",
    "        \n",
    "    def forward(self, X):\n",
    "        X = self.flatten(X)\n",
    "        X = self.linear1(X)\n",
    "        X = self.relu(X)\n",
    "        X = self.linear2(X)\n",
    "        X = self.relu(X)\n",
    "        X = self.linear3(X)\n",
    "        return self.softmax(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d23051b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:46.005115Z",
     "iopub.status.busy": "2024-07-15T12:43:46.004520Z",
     "iopub.status.idle": "2024-07-15T12:43:46.109402Z",
     "shell.execute_reply": "2024-07-15T12:43:46.108584Z"
    },
    "papermill": {
     "duration": 0.156836,
     "end_time": "2024-07-15T12:43:46.111520",
     "exception": false,
     "start_time": "2024-07-15T12:43:45.954684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = NNet(input_size, num_classes).to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a4ef63cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:46.256023Z",
     "iopub.status.busy": "2024-07-15T12:43:46.255266Z",
     "iopub.status.idle": "2024-07-15T12:43:46.260049Z",
     "shell.execute_reply": "2024-07-15T12:43:46.259197Z"
    },
    "papermill": {
     "duration": 0.060394,
     "end_time": "2024-07-15T12:43:46.262635",
     "exception": false,
     "start_time": "2024-07-15T12:43:46.202241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NNet(\n",
      "  (flatten): Flatten(start_dim=1, end_dim=-1)\n",
      "  (linear1): Linear(in_features=784, out_features=128, bias=True)\n",
      "  (linear2): Linear(in_features=128, out_features=50, bias=True)\n",
      "  (linear3): Linear(in_features=50, out_features=10, bias=True)\n",
      "  (relu): ReLU()\n",
      "  (softmax): Softmax(dim=None)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "45adfc9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:46.364548Z",
     "iopub.status.busy": "2024-07-15T12:43:46.363921Z",
     "iopub.status.idle": "2024-07-15T12:43:46.492056Z",
     "shell.execute_reply": "2024-07-15T12:43:46.491139Z"
    },
    "papermill": {
     "duration": 0.182115,
     "end_time": "2024-07-15T12:43:46.494934",
     "exception": false,
     "start_time": "2024-07-15T12:43:46.312819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted class: tensor([7], device='cuda:0')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1518: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n",
      "  return self._call_impl(*args, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "X = torch.rand(1, 28, 28, device=device)\n",
    "logits = model(X)\n",
    "pred_probab = nn.Softmax(dim=1)(logits)\n",
    "y_pred = pred_probab.argmax(1)\n",
    "print(f\"Predicted class: {y_pred}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1daa7de2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:46.595959Z",
     "iopub.status.busy": "2024-07-15T12:43:46.595251Z",
     "iopub.status.idle": "2024-07-15T12:43:49.491772Z",
     "shell.execute_reply": "2024-07-15T12:43:49.490473Z"
    },
    "papermill": {
     "duration": 2.949463,
     "end_time": "2024-07-15T12:43:49.494022",
     "exception": false,
     "start_time": "2024-07-15T12:43:46.544559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n",
      "Failed to download (trying next):\n",
      "HTTP Error 403: Forbidden\n",
      "\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to dataset/MNIST/raw/train-images-idx3-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 9912422/9912422 [00:00<00:00, 10593938.73it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting dataset/MNIST/raw/train-images-idx3-ubyte.gz to dataset/MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n",
      "Failed to download (trying next):\n",
      "HTTP Error 403: Forbidden\n",
      "\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to dataset/MNIST/raw/train-labels-idx1-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 28881/28881 [00:00<00:00, 1034790.62it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting dataset/MNIST/raw/train-labels-idx1-ubyte.gz to dataset/MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n",
      "Failed to download (trying next):\n",
      "HTTP Error 403: Forbidden\n",
      "\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to dataset/MNIST/raw/t10k-images-idx3-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1648877/1648877 [00:00<00:00, 7979052.23it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting dataset/MNIST/raw/t10k-images-idx3-ubyte.gz to dataset/MNIST/raw\n",
      "\n",
      "Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n",
      "Failed to download (trying next):\n",
      "HTTP Error 403: Forbidden\n",
      "\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz\n",
      "Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to dataset/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 4542/4542 [00:00<00:00, 3026295.28it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting dataset/MNIST/raw/t10k-labels-idx1-ubyte.gz to dataset/MNIST/raw\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "train_dataset = datasets.MNIST(root=\"dataset/\", train=True, transform=transforms.ToTensor(), download=True)\n",
    "test_dataset = datasets.MNIST(root=\"dataset/\", train=False, transform=transforms.ToTensor(), download=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1c01fe37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:49.600938Z",
     "iopub.status.busy": "2024-07-15T12:43:49.600576Z",
     "iopub.status.idle": "2024-07-15T12:43:49.605612Z",
     "shell.execute_reply": "2024-07-15T12:43:49.604733Z"
    },
    "papermill": {
     "duration": 0.060376,
     "end_time": "2024-07-15T12:43:49.607607",
     "exception": false,
     "start_time": "2024-07-15T12:43:49.547231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n",
    "test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bbcfa850",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:49.713422Z",
     "iopub.status.busy": "2024-07-15T12:43:49.712930Z",
     "iopub.status.idle": "2024-07-15T12:43:49.719457Z",
     "shell.execute_reply": "2024-07-15T12:43:49.718614Z"
    },
    "papermill": {
     "duration": 0.061166,
     "end_time": "2024-07-15T12:43:49.721283",
     "exception": false,
     "start_time": "2024-07-15T12:43:49.660117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def accuracy(loader, model):\n",
    "    num_correct = 0\n",
    "    num_samples = 0\n",
    "    model.eval()\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for x, y in loader:\n",
    "            x = x.to(device)\n",
    "            y = y.to(device)\n",
    "            x = x.reshape(x.shape[0], -1)\n",
    "            \n",
    "            pred = model(x)\n",
    "            _, predictions = pred.max(1)\n",
    "            num_correct += (predictions==y).sum()\n",
    "            num_samples += predictions.size(0)\n",
    "    model.train()\n",
    "    return float(num_correct)/float(num_samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "15512126",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:49.826258Z",
     "iopub.status.busy": "2024-07-15T12:43:49.825781Z",
     "iopub.status.idle": "2024-07-15T12:43:49.830293Z",
     "shell.execute_reply": "2024-07-15T12:43:49.829402Z"
    },
    "papermill": {
     "duration": 0.059412,
     "end_time": "2024-07-15T12:43:49.832297",
     "exception": false,
     "start_time": "2024-07-15T12:43:49.772885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a2047087",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:43:49.938180Z",
     "iopub.status.busy": "2024-07-15T12:43:49.937806Z",
     "iopub.status.idle": "2024-07-15T12:45:13.226349Z",
     "shell.execute_reply": "2024-07-15T12:45:13.225337Z"
    },
    "papermill": {
     "duration": 83.344161,
     "end_time": "2024-07-15T12:45:13.228924",
     "exception": false,
     "start_time": "2024-07-15T12:43:49.884763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for epoch in range(num_epochs):\n",
    "    for batch_idx, (data, label) in enumerate(train_loader):\n",
    "        data = data.to(device)\n",
    "        label = label.to(device)\n",
    "        data = data.reshape(data.shape[0], -1)\n",
    "        \n",
    "        pred = model(data)\n",
    "        loss = criterion(pred, label)\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fa03178e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T12:45:13.334510Z",
     "iopub.status.busy": "2024-07-15T12:45:13.333759Z",
     "iopub.status.idle": "2024-07-15T12:45:21.590835Z",
     "shell.execute_reply": "2024-07-15T12:45:21.589574Z"
    },
    "papermill": {
     "duration": 8.311895,
     "end_time": "2024-07-15T12:45:21.593249",
     "exception": false,
     "start_time": "2024-07-15T12:45:13.281354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train accuracy : 0.97985\n",
      "Test accuracy : 0.97\n"
     ]
    }
   ],
   "source": [
    "train_acc = accuracy(train_loader, model)\n",
    "test_acc = accuracy(test_loader, model)\n",
    "print(f\"Train accuracy : {train_acc}\\nTest accuracy : {test_acc}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 156.146819,
   "end_time": "2024-07-15T12:45:24.911001",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-15T12:42:48.764182",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
